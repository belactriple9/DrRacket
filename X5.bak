#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 75 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1           0 3362 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 183
(6
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e X5) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t c"
 #"onstructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 23 #";; A X6 implementation."
0 0 17 29 1 #"\n"
0 0 17 3 15 #";; Caleb Rippey"
0 0 17 29 1 #"\n"
0 0 17 3 79
(7
 #"@see http://www.radford.edu/itec380/2020fall-ibarland/Homeworks/Proj"
 #"ect/X0.html"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"@author ibarland@radford.edu"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"@version 2020-Oct-2"
0 0 17 3 1 #"2"
0 0 17 29 1 #"\n"
0 0 17 3 86
(8
 #"@original-at http://www.radford.edu/itec380/2020fall-ibarland/Homewo"
 #"rks/Project/X0.rkt"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 77
(9
 #"@license CC-BY -- share/adapt this file freely, but include attribut"
 #"ion, thx."
) 0 0 17 29 1 #"\n"
0 0 17 3 49 #"    https://creativecommons.org/licenses/by/4.0/ "
0 0 17 29 1 #"\n"
0 0 17 3 38 #"    https://creativecommons.org/licens"
0 0 17 3 20 #"es/by/4.0/legalcode "
0 0 17 29 1 #"\n"
0 0 17 3 77
(10
 #"Including a link to the *original* file satisifies \"appropriate att"
 #"ribution\"."
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"student-extras.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"scanner.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 91
(11
 #"  Expr          ::= Num | Paren | BinOp | IfZero | Id | let-expr | F"
 #"uncExpr | FuncApplyExpr"
) 0 0 17 29 1 #"\n"
0 0 17 3 98
(12
 #"  Paren         ::= [ Expr ]                            Interpretati"
 #"on: a parenthesized expression"
) 0 0 17 29 1 #"\n"
0 0 17 3 97
(13
 #"  BinOp         ::= ~ Expr Op Expr !                    Interpretati"
 #"on: apply a binary operator  "
) 0 0 17 29 1 #"\n"
0 0 17 3 15 #"  Op           "
0 0 17 3 122
(14
 #" ::= add | sub | mlt | mod               Interpretation: addition, s"
 #"ubtraction, multiplication, >>> x1 \"remainder\" (resp.)"
) 0 0 17 29 1 #"\n"
0 0 17 3 133
(15
 #"  IfZero        ::= if0 Expr thn Expr els Expr ;        Interpretati"
 #"on: if 1st expr is zero, answer is the 2nd expr, else use the 3rd"
) 0 0 17 3 5 #" expr"
0 0 17 29 1 #"\n"
0 0 17 3 148
(16
 #"  IfPos         ::= if+ Expr thn Expr els Expr ;        Interpretati"
 #"on: if 1st expr is >0, the answer is  the 2nd expr, else use the 3rd"
 #" expr >>> x1"
) 0 0 17 29 1 #"\n"
0 0 17 3 101
(17
 #"  let-expr      ::= let Id <- Expr in Expr              Interpretati"
 #"on: replace any instance of Id in"
) 0 0 17 3 47 #" the Expr(s) with the first Expr after the \"<-\""
0 0 17 29 1 #"\n"
0 0 17 3 133
(18
 #"  Id            ::= Id                                  Interpretati"
 #"on: Id can be any string that isn't reserved as token/punctuation"
) 0 0 17 29 1 #"\n"
0 0 17 3 170
(19
 #"  FuncExpr      ::= func { Id } returns Expr            Interpretati"
 #"on: function-value; the parameter is between curly-brackets, and the"
 #" body after the keyword \"returns\"."
) 0 0 17 29 1 #"\n"
0 0 17 3 116
(20
 #"  FuncApplyExpr ::= call Expr passing Expr              Interpretati"
 #"on: call the function, passing it as an argument"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; datatype defn:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; An Expr is:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  - a number"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";  - (make-paren [Expr])"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";  - (make-binop [Expr] [Op] [Expr])"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";  - (make-if-zero [Expr] [Expr] [Expr])"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";  - (make-let-expr Id [Expr] [Expr])  ; >>> x2"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";  - (make-id Id)                     ; >>> x2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 44 #"; An Op is: (one-of \"add\" \"sub\" \"mlt\" \"mod\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"binop"
0 0 24 3 2 #" ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"paren"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"if0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tst"
0 0 24 3 1 #" "
0 0 14 3 3 #"thn"
0 0 24 3 1 #" "
0 0 14 3 3 #"els"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 3 #"if+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"tst"
0 0 24 3 1 #" "
0 0 14 3 3 #"thn"
0 0 24 3 1 #" "
0 0 14 3 3 #"els"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 19 #"))                 "
0 0 17 3 8 #"; >>> x2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"let-expr"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")) "
0 0 17 3 8 #"; >>> x2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 9 #"func-expr"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 12 #"))          "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 15 #"func-apply-expr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")) "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Examples of Expr:"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";34"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";(make-paren 34)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";(make-binop 3 \"add\" 4)"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";(make-binop (make-paren 34) \"add\" (make-binop 3 \"mlt\" 4))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(make-if0 3 7 9)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(make-if0 (make-paren 1)"
0 0 24 29 1 #"\n"
0 0 17 3 68
(21
 #";          (make-binop (make-paren 34) \"add\" (make-binop 3 \"mlt\""
 #" 4))"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";          (make-if0 0 7 9))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"OP-FUNCS"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"add\""
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"sub\""
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mod\""
0 0 24 3 1 #" "
0 0 14 3 6 #"modulo"
0 0 24 3 2 #") "
0 0 17 3 8 #"; >>> x1"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"OPS"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 8 #"OP-FUNCS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; An Op is: (one-of OPS)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; string->expr : string -> Expr"
0 0 24 29 1 #"\n"
0 0 17 3 75
(22
 #"; given a string, return the parse-tree for the X0 expression at its"
 #" front."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"parse!"
0 0 24 3 2 #" ("
0 0 14 3 14 #"create-scanner"
0 0 24 3 2 #" ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 5 #")))] "
0 0 17 3 41 #"; >>> x2 modified to take in just numbers"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"parse!"
0 0 24 3 2 #" ("
0 0 14 3 14 #"create-scanner"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; parse! : scanner -> Expr"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; given a scanner, consume one X0 expression off the front of it"
0 0 24 29 1 #"\n"
0 0 17 3 5 #"; and"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; return the corresponding parse-tree."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 28 #"; Recursive-descent parsing:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"[\""
0 0 24 3 5 #")]   "
0 0 17 3 38 #"; consume the '[' off the input-stream"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 15 #"the-inside-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"]\""
0 0 24 3 5 #")]   "
0 0 17 3 26 #"; consume the trailing ']'"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                }"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"make-paren"
0 0 24 3 1 #" "
0 0 14 3 15 #"the-inside-expr"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"~\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"~\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 5 #"lefty"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 2 #"op"
0 0 24 3 6 #"     ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 7 #"member?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 3 #"OPS"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Unknown op \""
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                       "
0 0 21 3 1 #"'"
0 0 14 3 13 #"keep-on-going"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 6 #"righty"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"!\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                }"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 14 3 5 #"lefty"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 6 #"righty"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"if0\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"if0\""
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 8 #"the-test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"thn\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 12 #"the-then-ans"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"els\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 12 #"the-else-ans"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\";\""
0 0 24 3 3 #")]}"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"make-if0"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-test"
0 0 24 3 1 #" "
0 0 14 3 12 #"the-then-ans"
0 0 24 3 1 #" "
0 0 14 3 12 #"the-else-ans"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"if+\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"if+\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 8 #"the-test"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"thn\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 12 #"the-then-ans"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"els\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 12 #"the-else-ans"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\";\""
0 0 24 3 3 #")]}"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"make-if+"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-test"
0 0 24 3 1 #" "
0 0 14 3 12 #"the-then-ans"
0 0 24 3 1 #" "
0 0 14 3 12 #"the-else-ans"
0 0 24 3 4 #"))] "
0 0 17 3 8 #"; >>> x1"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"let\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"let\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"in\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"func"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")]}"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 13 #"make-let-expr"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 25 #"))]                      "
0 0 17 3 8 #"; >>> x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"func\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 31 #"))                             "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"func\""
0 0 24 3 16 #")]              "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"{\""
0 0 24 3 19 #")]                 "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 28 #"))]                         "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"}\""
0 0 24 3 19 #")]                 "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"returns\""
0 0 24 3 13 #")]           "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"func"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 33 #")]}                              "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 30 #"))]                           "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"call\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 31 #"))                             "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"call\""
0 0 24 3 16 #")]              "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 4 #"func"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 33 #")]                               "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 2 #") "
0 0 19 3 9 #"\"passing\""
0 0 24 3 13 #")]           "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ["
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 6 #"parse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 32 #")]}                             "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 20 #"make-func-apply-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"func"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 21 #"))]                  "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")) "
0 0 17 3 18 #";assume it's an Id"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"make-id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pop!"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 39 #"))]                                    "
0 0 17 3 7 #";>>> x2"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"parse!"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 53 #"\"syntax error -- something has gone awry!  Seeing ~v\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 20 #"; eval : Expr -> Num"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; Return the value which this Expr evaluates to."
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; In X0, the only type of value is a Num."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"paren?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"paren-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"binop?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 6 #"the-op"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"binop-op"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 8 #"left-val"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 10 #"binop-left"
0 0 24 3 2 #"  "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 9 #"right-val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 11 #"binop-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           }"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 14 3 6 #"the-op"
0 0 24 3 1 #" "
0 0 14 3 8 #"left-val"
0 0 24 3 1 #" "
0 0 14 3 9 #"right-val"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"if0?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-tst"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-thn"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-els"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"if+?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-tst"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-thn"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-els"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))] "
0 0 17 3 8 #"; >>> x1"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"id?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 75
(23
 #"]                                                                   "
 #"       "
) 0 0 17 3 7 #"; >>>x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"let-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 14 #"let-expr-value"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ["
0 0 14 3 7 #"e-prime"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"let-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))]}"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 7 #"e-prime"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 34 #";(eval (substitute (let-expr-id e)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 51 #";                                (let-expr-value e)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 61
#";                                (let-expr-expr e)))] ; >>>x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"func-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 54 #"]                                                     "
0 0 17 3 28 #"; >>> x4 ;evaluate to itself"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 16 #"func-apply-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 2 #"{["
0 0 14 3 10 #"actual-arg"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 21 #"func-apply-expr-value"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 9 #"))]      "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 1 #"f"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 20 #"func-apply-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 34 #"))]                               "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 1 #"_"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 10 #"func-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"trying to call a non-function in: \""
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 21 3 1 #"'"
0 0 14 3 13 #"keep-on-going"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ["
0 0 14 3 7 #"e-prime"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 2 #" ("
0 0 14 3 12 #"func-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 23 #")                      "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                               "
0 0 14 3 10 #"actual-arg"
0 0 24 3 28 #"                            "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 14 #"func-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 21 #"))]}                 "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 14 3 7 #"e-prime"
0 0 24 3 38 #" ))]                                  "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"unknown type of expr: \""
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;;;;;;;;;;; >>>X2"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; subst : Id number expr -> expr"
0 0 24 29 1 #"\n"
0 0 17 3 69
(24
 #"; Return `e` but with any free occurrences of `id` replaced with `v`"
 #"."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 19 #")                  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 19 #"]                  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"paren?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-paren"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 7 #"paren-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 22 #")))]                  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"binop?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 10 #"binop-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 20 #"))                  "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 8 #"binop-op"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 19 #")                  "
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 11 #"binop-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 22 #")))]                  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"if0?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-if0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-tst"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 20 #"))                  "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-thn"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 20 #"))                  "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-els"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 22 #")))]                  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"if+?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-if+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-tst"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 20 #"))                  "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-thn"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")) "
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-els"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 22 #")))]                  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"let-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"make-let-expr"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 14 #"let-expr-value"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"id-id"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"id-id"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 13 #"let-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 13 #"let-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"id-id"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"id-id"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")) "
0 0 17 3 36 #"; if they match, shadow the current "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 1 #"e"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 13 #"make-let-expr"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 19 #")                  "
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                          "
0 0 17 3 45 #"; We know the above is an Id, not *any* Expr."
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 14 #"let-expr-value"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 20 #"))                  "
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 13 #"let-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #"))))"
0 0 17 3 2 #";]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"func-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"func-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"id-id"
0 0 24 3 2 #" ("
0 0 14 3 12 #"func-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"id-id"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 14 #"func-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 56 #")                                                       "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 14 #"func-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 16 #"func-apply-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 20 #"make-func-apply-expr"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 20 #"func-apply-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #"))   "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 10 #"substitute"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #" ("
0 0 14 3 21 #"func-apply-expr-value"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")))]"
0 0 17 3 32 #"; >>> x4                ; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"id?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"id-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 5 #"id-id"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")) "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")]   "
0 0 17 3 6 #";>>>X2"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"expr->string"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"unknown internal format?!: ~v\""
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; eval-binop : op num num -> num"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Implement the binary operators."
0 0 24 29 1 #"\n"
0 0 17 3 88
(25
 #"; We just look up `op` in the list `OP-FUNCS`, and use the function "
 #"that's in that list."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"add\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"sub\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mod\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 5 #"floor"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 6 #"))))] "
0 0 17 3 7 #";>>> x1"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"eval"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Unimplemented op \""
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 52 #"; An alternate implementation -- forces us to repeat"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 38 #"; the string-constants already in OPS:"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" {["
0 0 14 3 9 #"ops-entry"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 14 3 8 #"OP-FUNCS"
0 0 24 3 3 #")]}"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 43 #"; OPS is a list of list-of-string-and-func;"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 71
(26
 #"; so `(second ops-entry)` is a function (if ops-entry is found at al"
 #"l)."
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 9 #"ops-entry"
0 0 24 3 4 #") (("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 9 #"ops-entry"
0 0 24 3 2 #") "
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"Unimplemented op \""
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"; most be one of: \""
0 0 24 3 1 #" "
0 0 14 3 3 #"OPS"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"add\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"sub\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-binop"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; expr->string : Expr -> string"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; Return a string-representation of `e`."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #") "
0 0 14 3 1 #"e"
0 0 24 3 2 #" ("
0 0 14 3 14 #"exact->inexact"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"paren?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"paren-e"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"]\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 6 #"binop?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"~\""
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 10 #"binop-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 3 #"\" \""
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 8 #"binop-op"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 3 #"\" \""
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 11 #"binop-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 3 #"\"!\""
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   )]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"if0?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"if0 \""
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-tst"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 7 #"\" thn \""
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-thn"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 7 #"\" els \""
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if0-els"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 19 3 3 #"\";\""
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                   )]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 4 #"if+?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"if+ \""
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-tst"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 7 #"\" thn \""
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-thn"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 7 #"\" els \""
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 7 #"if+-els"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 3 #"\";\""
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                 )]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"id?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 5 #"id-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 42 #")]                                        "
0 0 17 3 8 #"; >>> x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 9 #"let-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"let \""
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"id-id"
0 0 24 3 2 #" ("
0 0 14 3 11 #"let-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 6 #"\" <- \""
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"let-expr-value"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 6 #"\" in \""
0 0 24 3 30 #"                              "
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"let-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))] "
0 0 17 3 8 #"; >>> x2"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 10 #"func-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"func {\""
0 0 24 3 22 #"                      "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 5 #"id-id"
0 0 24 3 2 #" ("
0 0 14 3 12 #"func-expr-id"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 8 #"))      "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 19 3 12 #"\"} returns \""
0 0 24 3 18 #"                  "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"func-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 5 #")))] "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 16 #"func-apply-expr?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"call \""
0 0 24 3 22 #"                      "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 20 #"func-apply-expr-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 7 #"))     "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                             "
0 0 19 3 11 #"\" passing \""
0 0 24 3 18 #"                  "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 21 #"func-apply-expr-value"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 6 #")))]  "
0 0 17 3 8 #"; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"expr->string"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"unknown type of expr: \""
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 88
(27
 #"; check-token= : (or/c string? number?) (or/c string? number?) -> (o"
 #"r/c string? number?)"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(28
 #"; Verify that `actual-token` equals `expected-token`; throw an error"
 #" if not."
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(29
 #"; IF they are equal, just return `actual-token` (as a convenience-va"
 #"lue)."
) 0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"check-token="
0 0 24 3 1 #" "
0 0 14 3 12 #"actual-token"
0 0 24 3 1 #" "
0 0 14 3 14 #"expected-token"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 12 #"actual-token"
0 0 24 3 1 #" "
0 0 14 3 14 #"expected-token"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 12 #"actual-token"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"check-token="
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"Expected the token ~v, but got ~v.\""
0 0 24 3 1 #" "
0 0 14 3 14 #"expected-token"
0 0 24 3 1 #" "
0 0 14 3 12 #"actual-token"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 130
(30
 #";Unit tes(string->expr \"call func {x} returns if0 0 thn call func {"
 #"o} returns 5 else func {x} returns 10;\")ts >>>x1 all unit tests"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #";for some reason racketunit isn't working"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";Some Racket tests for X1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest1"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"~8.1 mod [3]!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest1"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 21 3 3 #"8.1"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mod\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-paren"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest1"
0 0 24 3 3 #")) "
0 0 19 3 15 #"\"~8.1 mod [3]!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest1"
0 0 24 3 3 #")) "
0 0 21 3 3 #"2.1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"if+ \""
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest1"
0 0 24 3 1 #" "
0 0 19 3 15 #"\" thn 0 els 1;\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"progTestIfPosWithNeg"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"if+ -1 thn 0 els 1;\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest2"
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-if+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 21 3 3 #"8.1"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mod\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-paren"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest2"
0 0 24 3 3 #")) "
0 0 19 3 32 #"\"if+ ~8.1 mod [3]! thn 0 els 1;\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest2"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 20 #"progTestIfPosWithNeg"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";Some Racket tests for X2"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest3"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"let x <- 5 in ~4 mlt x!\""
0 0 24 3 1 #")"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest3"
0 0 24 3 3 #") ("
0 0 14 3 13 #"make-let-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest3"
0 0 24 3 3 #")) "
0 0 19 3 25 #"\"let x <- 5 in ~4 mlt x!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest3"
0 0 24 3 3 #")) "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest4"
0 0 24 3 1 #" "
0 0 19 3 61
#"\"if+ let x <- 5 in if0 ~4 mlt x! thn 1 els x; thn 20 els 15;\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 78
(31
 #";let x <- 5 in if0 ~4 mlt x! thn 1 els x;                 <- is sub "
 #"expression"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"make-if+"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-let-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 8 #"make-if0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 4 #"))) "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"15"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest4"
0 0 24 3 3 #")) "
0 0 19 3 61
#"\"if+ let x <- 5 in if0 ~4 mlt x! thn 1 els x; thn 20 els 15;\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest4"
0 0 24 3 3 #")) "
0 0 21 3 2 #"20"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 4 #")) ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 4 #")) ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 4 #")) ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"~4 sub z!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"~4 sub 7!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"let x <- z in ~x mod z!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"let x <- 7 in ~x mod 7!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest5"
0 0 24 3 1 #" "
0 0 19 3 60
#"\"if+ [not_pos] thn ~[not_pos] mlt 2! els ~[not_pos] mlt 3!;\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 10 #"substitute"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"not_pos\""
0 0 24 3 2 #") "
0 0 21 3 2 #"-5"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"progTest5"
0 0 24 3 4 #")) ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 45 #"\"if+ [-5] thn ~[-5] mlt 2! els ~[-5] mlt 3!;\""
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; >>> x3/4 everything below this point ; >>> x4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 112
(32
 #";tests that are asked in Q1 of HW X4 here: https://www.radford.edu/~"
 #"itec380//2020fall-ibarland/Homeworks/X4.html"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"let y <- 3 in let x <- 5 in ~x add y!\""
0 0 24 3 3 #")) "
0 0 21 3 1 #"8"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 39 #"\"let y <- 3 in let x <- y in ~x add y!\""
0 0 24 3 3 #")) "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 61
#"\"let x <- 5 in let y <- 3 in ~let x <- y in ~x add y! add x!\""
0 0 24 3 3 #")) "
0 0 21 3 2 #"11"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";tests for for X4"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";string->expr tests (parse! technically) for a func-expr"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"func {x} returns ~~5 mlt 3! add 1!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"add\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"func {seventeen} returns 17\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"seventeen\""
0 0 24 3 2 #") "
0 0 21 3 2 #"17"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";expr->string tests for a func-expr"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"add\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 19 3 36 #"\"func {x} returns ~~5 mlt 3! add 1!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"expr->string"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"seventeen\""
0 0 24 3 2 #") "
0 0 21 3 2 #"17"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 29 #"\"func {seventeen} returns 17\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";eval tests for a func-expr"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"func {x} returns ~~5 mlt 3! add 1!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"add\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"func {x} returns ~~x mlt 3! add 1!\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"add\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 70
(33
 #"\"func{n} returns if0 ~n mod 2! thn ~n mlt 0.5! els ~~3 mlt n! add 1"
 #"!;\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"make-if0"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"mod\""
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 1 #" "
0 8          10 21 4 #"1/2\0"
1 #"\0"
8 #"decimal\0"
2 #"1\0"
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 3 #")) "
0 0 19 3 5 #"\"add\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";tests for func-apply-expr s"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";string->expr tests (parse! technically) for a func-apply-expr"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"call func {x} returns ~~x mlt 3! add 1! passing 5\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 20 #"make-func-apply-expr"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"add\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 123
(34
 #";(trace eval) ; >>> x4 I had to trace because I couldn't tell where "
 #"variables weren't changing where they were supposed to."
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #";eval tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"call func {x} returns ~~x mlt 3! add 1! passing 5\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 2 #"16"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 125
(35
 #"\"call func {x} returns if0 x thn call func {o} returns ~o add 5! pa"
 #"ssing 1 els call func {x} returns 10 passing 0; passing 2\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";more complex eval tests"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 110
(36
 #"\"call func {x} returns if0 x thn call func {o} returns ~o add 5! pa"
 #"ssing 1 els func {x} returns 10; passing 0\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 110
(37
 #"\"call func {x} returns if0 x thn call func {o} returns ~o add 5! pa"
 #"ssing 0 els func {x} returns 10; passing 0\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 110
(38
 #"\"call func {x} returns if0 x thn call func {o} returns ~o add 5! pa"
 #"ssing 1 els func {x} returns 10; passing 1\""
) 0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->expr"
0 0 24 3 1 #" "
0 0 19 3 124
(39
 #"\"call func {x} returns if0 x thn call func {o} returns ~o add 5! pa"
 #"ssing 1 els let x <- 15 in func {x} returns x; passing 1\""
) 0 0 24 3 3 #")) "
0 0 17 3 65
#";this tests shadowing the function variable with a local variable"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 21 3 2 #"15"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 17 #"#| X3 question 1:"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"a."
0 0 17 29 1 #"\n"
0 0 17 3 41 #"\342\207\222 let y <- 3 in let x <- 5 in ~x add y!"
0 0 17 29 1 #"\n"
0 0 17 3 72
(40
 #"\342\207\222 [let x <- 5 in ~x add 3!]                              "
 #"             "
) 0 0 17 29 1 #"\n"
0 0 17 3 41 #"\342\207\222 [~5 add 3!]                          "
0 0 17 29 1 #"\n"
0 0 17 3 5 #"\342\207\222 8"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"b."
0 0 17 29 1 #"\n"
0 0 17 3 41 #"\342\207\222 let y <- 3 in let x <- y in ~x add y!"
0 0 17 29 1 #"\n"
0 0 17 3 97
(41
 #"\342\207\222 [let x <- 3 in ~x add 3!]                              "
 #"                                      "
) 0 0 17 29 1 #"\n"
0 0 17 3 41 #"\342\207\222 [~3 add 3!]                          "
0 0 17 29 1 #"\n"
0 0 17 3 5 #"\342\207\222 6"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"c."
0 0 17 29 1 #"\n"
0 0 17 3 63
(42
 #"\342\207\222 let x <- 5 in let y <- 3 in ~let x <- y in ~x add y! ad"
 #"d x!"
) 0 0 17 29 1 #"\n"
0 0 17 3 56
#"\342\207\222 [let y <- 3 in ~[let x <- y in ~x add y!] add 5!]   "
0 0 17 3 131
(43
 #"                                                                    "
 #"                                                               "
) 0 0 17 29 1 #"\n"
0 0 17 3 126
(44
 #"\342\207\222 ~[let x <- 3 in ~x add 3!] add 5!                      "
 #"                                                                   "
) 0 0 17 3 3 #"   "
0 0 17 29 1 #"\n"
0 0 17 3 71
(45
 #"\342\207\222 ~~3 add 3! add 5!                                      "
 #"            "
) 0 0 17 29 1 #"\n"
0 0 17 3 39 #"\342\207\222 ~6 add 5!                          "
0 0 17 29 1 #"\n"
0 0 17 3 6 #"\342\207\222 11"
0 0 17 29 1 #"\n"
0 0 17 3 2 #".d"
0 0 17 29 1 #"\n"
0 0 17 3 49
#"\342\207\222 let x <- 5 in let x <- ~x add 1! in ~x add 2!"
0 0 17 29 1 #"\n"
0 0 17 3 35 #"\342\207\222 let x <- ~5 add 1! in ~x add 2!"
0 0 17 29 1 #"\n"
0 0 17 3 27 #"\342\207\222 let x <- 6 in ~x add 2!"
0 0 17 29 1 #"\n"
0 0 17 3 13 #"\342\207\222 ~6 add 2!"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"\342\207\222 8   "
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";>>> x4 everything below applies to x4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 24 3 2 #") "
0 0 21 3 2 #"17"
0 0 24 3 2 #") "
0 0 17 3 28 #";will evaluate to 17 ;>>> x4"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 13 #"make-let-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"sqr\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 24 3 4 #"))) "
0 0 17 3 21 #";apply the expression"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 17 3 66
#"; will square a given number after passing in with func-apply-expr"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 13 #"make-let-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"factorial\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"if0"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                       "
0 0 21 3 1 #"1"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"mlt\""
0 0 24 3 2 #" ("
0 0 14 3 20 #"make-func-apply-expr"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"factorial\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 63
#"                                                              ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"num\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"sub\""
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 17 3 58
#";...: expected a finished expression, but found a template"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 3 1 #"("
0 0 14 3 13 #"make-let-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"make-adder\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 3 #") ("
0 0 14 3 14 #"make-func-expr"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"m\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"make-binop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"n\""
0 0 24 3 2 #") "
0 0 19 3 5 #"\"add\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"make-id"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"m\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 17 3 58
#";...: expected a finished expression, but found a template"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
